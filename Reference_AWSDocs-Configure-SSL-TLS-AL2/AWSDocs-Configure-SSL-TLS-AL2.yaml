description: |-
  Tutorial: Configuring SSL/TLS with Amazon Linux 2
  ===

  This procedure takes you through the process of setting up TLS on Amazon Linux 2 with a self-signed digital
  certificate.

  Note:  A self-signed certificate is acceptable for testing but not production. If you expose your self-signed
  certificate to the internet, visitors to your site are greeted by security warnings.

  Pre-requisites
  ---

  To run the following Automation document, you must have permissions to run Automation workflows.
  The Automation workflow runs in the context of the current AWS Identity and Access Management (IAM) user.
  Additionally, you must run the Automation document [```AWS-InstallALAMPServer-AL2```](https://console.aws.amazon.com/systems-manager/documents/AWS-InstallALAMPServer-AL2/description)
   before using this document. This document installs a WordPress blog on the instance
  launched in ```AWS-InstallALAMPServer-AL2```.

  Outputs
  ---

  Once the Automation has completed, you will be able to use HTTPS to connect to your web server by navigating to the public DNS address (or the public IP address) of the launched instance. For example:

  >https://my.public.dns.amazonaws.com/

  Cleanup
  ---

  To remove resources created by this Automation document. Navigate to the [CloudFormation console](https://console.aws.amazon.com/cloudformation/home) and delete the stack created by the preceding Automation document.

  **Important:**

  If you delete the stack created, then you must run the document ```AWS-InstallALAMPServer-AL2``` again before using this Automation document.
schemaVersion: '0.3'
mainSteps:
  - name: checkForCloudFormationStack
    action: 'aws:assertAwsResourceProperty'
    onFailure: 'step:RunInstallALAMPServerAL2'
    inputs:
      Service: cloudformation
      Api: DescribeStacks
      StackName: LAMPStack-AL2
      PropertySelector: '$.Stacks[0].StackStatus'
      DesiredValues:
        - CREATE_COMPLETE
    nextStep: outputPublicDNS
  - name: RunInstallALAMPServerAL2
    action: 'aws:executeAutomation'
    maxAttempts: 3
    timeoutSeconds: 3600
    onFailure: Abort
    inputs:
      DocumentName: AWSDocs-InstallALAMPServer-AL2
    nextStep: outputPublicDNS
  - name: outputPublicDNS
    action: 'aws:runCommand'
    inputs:
      Comment: Outputting public DNS address of EC2 instance
      DocumentName: AWS-RunShellScript
      Targets:
        - Key: 'tag:Name'
          Values:
            - Automation-LAMPStack-AL2
      Parameters:
        commands:
          - 'curl -fsq http://169.254.169.254/latest/meta-data/public-hostname'
        executionTimeout: '3600'
        workingDirectory: ''
    description: |-
      **Output the public DNS address for the launched EC2 instance**

      This step outputs the public DNS address for the EC2 instance launched. You can use this public DNS address to connect to the WordPress blog setup once the Automation workflow has completed. Select the radio button next to the Step execution ID to display the public DNS address of the EC2 instance.

  - name: GetGroupId
    action: aws:executeAwsApi
    inputs:
        Service: ec2
        Api: DescribeSecurityGroups
        Filters:
          - Name: 'group-name'
            Values: ['Automation-LAMPStack-AL2-HTTP']
    outputs:
        - Name: EC2GroupId
          Selector: $.SecurityGroups[0].GroupId
          Type: String
    description: |-
      ** List the security groups**

      In order to add port 443 to the allowed ingress rules in the EC2 instance created by the LAMP stack CloudFormation template,
      you must determine the GroupId of the ingress rule since it won't be in the default VPC.
  - name: AddIngressRule
    action: aws:executeAwsApi
    inputs:
        Service: ec2
        Api: AuthorizeSecurityGroupIngress
        ToPort: 443
        FromPort: 443
        IpProtocol: 'tcp'
        CidrIp: '0.0.0.0/0'
        GroupId: '{{ GetGroupId.EC2GroupId }}'
    description: |-
      ** Add the security ingress **

      This step adds port 443 to the allowed ingress rules for the VPC created by the LAMP stack CloudFormation template.
  - name: verifyHTTPdEnabled
    action: 'aws:runCommand'
    inputs:
      DocumentName: AWS-RunShellScript
      Targets:
        - Key: 'tag:Name'
          Values:
            - Automation-LAMPStack-AL2
      Comment: Verifying that Apache HTTPd is enabled
      Parameters:
        commands:
          - sudo systemctl start httpd
          - sudo systemctl enable httpd
        workingDirectory: ''
        executionTimeout: '3600'
    description: |-
      **Verify that Apache is running and enabled.**

      This step verifies that Apache has been enabled on the AL2 stack.
  - name: InstallDependencies
    action: 'aws:runCommand'
    inputs:
      DocumentName: AWS-RunShellScript
      Targets:
        - Key: 'tag:Name'
          Values:
            - Automation-LAMPStack-AL2
      Comment: Installing dependencies
      Parameters:
        commands:
          - echo "Cleaning up house..."
          - sudo yum-complete-transaction -y
          - echo "Updating any outstanding packages"
          - sudo yum update -y
          - echo "Installing mod_ssl"
          - sudo yum install -y mod_ssl
        workingDirectory: ''
        executionTimeout: '3600'
    description: |-
      **Install mod_ssl**

      This step updates any dependencies and installs mod_ssl.
  - name: CreateCertificate
    action: 'aws:runCommand'
    inputs:
      DocumentName: AWS-RunShellScript
      Targets:
        - Key: 'tag:Name'
          Values:
            - Automation-LAMPStack-AL2
      Comment: Creating SSL Certificate
      Parameters:
        commands:
          - sudo ./make-dummy-cert localhost.crt
        workingDirectory: /etc/pki/tls/certs
        executionTimeout: '3600'
    description: |-
      **Create SSL certificate**

      This step creates a self-signed certificate chain for use locally.
  - name: ModifySSLConfAndReload
    action: 'aws:runCommand'
    inputs:
      DocumentName: AWS-RunShellScript
      Targets:
        - Key: 'tag:Name'
          Values:
            - Automation-LAMPStack-AL2
      Comment: Modifying ssl.conf
      Parameters:
        commands:
          - sudo sed -e '/SSLCertificateKeyFile/ s/^/#/' -i ssl.conf
          - sudo systemctl reload httpd
        workingDirectory: /etc/httpd/conf.d/
        executionTimeout: '3600'
    description: |-
      **Modify the mod_ssl configuration**

      Comment out the `SSLCertificateKeyFile` option in `ssl.conf` so that the httpd doesn't fail to
      find it.

      Since the SSL certificate created in the `CreateCertificate` step contains the key as a single file,
      the httpd won't find a separate key file. This is fine for a self-signed certificate, but the two
      parts should be separated for use in production.

      The HTTPD is then reloaded.
  - name: VerifyHTTPSLocally
    action: 'aws:runCommand'
    inputs:
      Targets:
        - Key: 'tag:Name'
          Values:
            - Automation-LAMPStack-AL2
      Comment: Verifying SSL has been enabled.
      DocumentName: AWS-RunShellScript
      Parameters:
        commands:
          - 'curl -k https://localhost/'
    description: |-
      **Verify that HTTPS has been turned on**

      Because the HTTPd configuration has been modified, it's important that the result of those modifications
      be verified. Using curl, the local configuration is checked to make sure that at least local TLS is turned on
      and working properly.
    isEnd: true
  - name: deleteStackOnCompletion
    action: 'aws:deleteStack'
    maxAttempts: 1
    inputs:
      StackName: LAMPStack-AL2
    description: |-
      **Remove the CloudFormation Template and Associated Resources**

      This step deletes the CloudFormation stack and the associated resources originally launched using the Automation document ```AWS-InstallALAMPServer-AL```.

      **Note**

      If you run this step, the EC2 instance that was launched will be terminated.
    isEnd: true
